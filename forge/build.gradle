plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    runs.configureEach {
        property("mixin.env.remapRefMap", "true")
        property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")

        programArg("-mixin.config=create.mixins.json")
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // Create, Ponder, Flywheel
        url = "https://maven.createmod.net"
        content {
            includeGroup("com.simibubi.create")
            includeGroup("dev.engine-room.flywheel")
            includeGroup("net.createmod.ponder")
        }
    }
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
        }
    }
}

dependencies {
    forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")
    modImplementation("dev.engine-room.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }

    // if you would like to add integration with JEI, uncomment this line.
//    modCompileOnly("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version", minecraft_version,
            "create_version", create_forge_version.split("-")[0], // cut off build number
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

loom {
    forge {
        mixinConfig(
                "createspawnerboxer-common.mixins.json",
                "createspawnerboxer.mixins.json"
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
